
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id               String      @id @default(cuid())
  name             String
  email            String?     @unique
  teamId           String
  sharedSettingsId String?
  organizationId   String
  invited          DateTime    @default(now())
  deactivated      DateTime?
  projects         Project[]   @relation("ProjectEmployees")
  tasks            Task[]      @relation("TaskEmployees")
  shifts           Shift[]
  activities       Activity[]
  screenshots      Screenshot[] // Relation to screenshots
  timeEntries      TimeEntry[] // Legacy relation
  sharedSettings   SharedSettings? @relation(fields: [sharedSettingsId], references: [id])
  
  // New relations for complete onboarding flow
  verificationTokens VerificationToken[]
  credentials       Credentials?
}

model SharedSettings {
  id             String   @id @default(cuid())
  name           String
  type           String   // "personal" or "office"
  settings       Json     // JSON configuration payload
  organizationId String
  default        Boolean  @default(false)
  createdAt      DateTime @default(now())
  employees      Employee[]
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  employees   Employee[] @relation("ProjectEmployees")
  tasks       Task[]
  teams       String[] // Array of team IDs
  billable    Boolean  @default(false)
  statuses    String[] // Array of status options
  priorities  String[] // Array of priority options
  organizationId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  timeEntries TimeEntry[] @relation("ProjectTimeEntries") 
  shifts      Shift[]
  // Legacy relation
}

model Task {
  id          String   @id @default(cuid())
  name        String
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  description String?
  employees   Employee[] @relation("TaskEmployees")
  status      String?
  priority    String?
  billable    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  timeEntries TimeEntry[] @relation("TaskTimeEntries") // Legacy relation
  shifts      Shift[]
}

model Shift {
  id             String   @id @default(cuid())
  employeeId     String
  employee       Employee @relation(fields: [employeeId], references: [id])
  teamId         String
  taskId         String?
  task           Task?    @relation(fields: [taskId], references: [id])
  projectId      String?
  project        Project? @relation(fields: [projectId], references: [id])
  token          String?
  type           String?
  start          DateTime @default(now())
  end            DateTime?
  duration       Int?     // Duration in milliseconds
  timezoneOffset Int      // Timezone offset in minutes
  activities     Activity[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Activity {
  id              String   @id @default(cuid())
  shiftId         String
  shift           Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  employeeId      String
  employee        Employee @relation(fields: [employeeId], references: [id])
  start           DateTime
  end             DateTime?
  duration        Int?     // Duration in milliseconds
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  screenshots     Screenshot[] // Relation to screenshots
}

// Screenshot model for tracking user screenshots during activities
model Screenshot {
  id              String   @id @default(cuid())
  activityId      String?
  activity        Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  employeeId      String
  employee        Employee @relation(fields: [employeeId], references: [id])
  imageUrl        String   // URL to the uploaded screenshot
  thumbnailUrl    String?  // Optional thumbnail URL
  fileName        String   // Original filename
  fileSize        Int      // File size in bytes
  mimeType        String   // Image MIME type (e.g., "image/png")
  width           Int      // Screenshot width in pixels
  height          Int      // Screenshot height in pixels
  hasPermissions  Boolean  @default(false) // Whether app had proper permissions
  permissionError String?  // Description of permission issue if any
  capturedAt      DateTime @default(now()) // When screenshot was taken
  uploadedAt      DateTime @default(now()) // When uploaded to storage
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([activityId])
  @@index([employeeId])
  @@index([capturedAt])
}

// Legacy models for backward compatibility
model TimeEntry {
  id         String   @id @default(cuid())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
  startTs    DateTime
  endTs      DateTime
  project    Project? @relation("ProjectTimeEntries", fields: [projectId], references: [id])
  projectId  String?
  task       Task?    @relation("TaskTimeEntries", fields: [taskId], references: [id])
  taskId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @default(now())
}

// New models for complete onboarding flow
model VerificationToken {
  id         String   @id @default(cuid())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  token      String   @unique
  expiresAt  DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Credentials {
  id           String   @id @default(cuid())
  employeeId   String   @unique
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
